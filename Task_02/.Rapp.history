x[1:10]
x[is.na(x)]
y <- [!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
namesvect2 <- c("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect("bar")
vect[bar]
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
skip()
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(data.frame)
class(my_data)
cnames <- vector("patient", "age", "weight", "bp", "rating", "test")
skip()
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
(6 < 7)
6 < 7
10 <= 10
5 != 7
!5 != 7
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE. FALSE. FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical(twins, twins)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(c(>7))
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x)
x
skip()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector), submit()
my_mean <- function(my_vector)
my_mean <- sum(my_vector)/length(my_vector)
my_mean <- sum(my_vector)/length(my_vector), submit()
submit(my_mean <- sum(my_vector)/length(my_vector))
skip()
my_mean(c(4,5,10))
remainder <- function(num, 2)
skip()
remainder(5)
remainder(11,5)
remainder(devisor = 11, num = 5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
skip()
evaluate(st.dev(c(1.4, 3.6, 7.9, 8.8)))
evaluate(standard deviation(c(1.4, 3.6, 7.9, 8.8)))
skip()
evaluate(function(x){x+1}, 6)
evaluate(function(x), c(8, 4, 0))
skip()
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(3)]}, c(8, 4, 0))
skip()
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
skip()
mad_libs
paste(Colordado, running, river)
paste(Colorado, running, river)
skip()
%p% <- function(first,second){first * second + 1}
submit()
Happy %p% Holidays
skip()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot((cars) x-axis = speed, y- axis = dist)
skip()
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, x-axis = speed)
skip()
plot(x= cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x= cars$speed, y = cars$dist, xlab = Speed, ylab = "Stopping Distance")
skip()
plot(cars, main = "My Plot")
plot(car, subtitle = "My Plot Subtitle")
skip()
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(cars, form= mpg ~cyl)
boxplot(formula = mpg ~cyl, data =mtcars)
hist(mtcars$mpg)
sourceTime.pdf("https://jonsmitchell.com/code/plotFxn02b.R")
setwd('~/Desktop/Evolution/Tasks/Task_02')#
Data <- read.csv('https://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)#
write.csv(Data, 'rawdata.csv', quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
Each one shows the data present for the particular day or set of dates that we put into R. #
We would type in Data[257] to find all the data that would be present on the 257th observation.#
Feeds <- which(Data[,9] == 'bottle')#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
There are two sets of 6 rows, with each row containing the same numbers. The rows represent the dates and times that the child was given their bottle in the first set of 6 rows. The second set represents the amount of formula and caregiver that provided the bottle. All of the rows have a purpose of showing times that a bottle was administered to the child.#
Feeds <- which(Data[,'event'] == 'bottle')#
Feeds <- which(Data$event == 'bottle')#
All of the functions use the (which) function which helps pinpoint certain characteristics. By using Data and event afterwards, we are able to target a specific set of data and show R that we are searching for an event within this Data. By adding ==bottle at the end, it tells R that we are looking for which events include bottle. I am convinced all the functions do the same because despite the different in ()'s and $', we are able to still pinpoint identical information. #
#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)#
#
Question 1- I am having trouble finding the values given for weight and nap time which means they would not suffice as testable hypotheses. The amount of fluid given to Beren in a bottle is given repeatedly so whether the data supports the hypothesis or not, hypothesis 3 gives an assumption that can easily be tested. #
Feeds <- which(beren3$event == "bottle")#
avgMilk <- mean(beren3$value[Feeds])#
avgMilk#
#
The units for this avgMilk is in ounces. #
The value column was used from the beren3 object to show the numeric values that were correlated with the "bottle" data that was previously used to create the "Feeds" object. #
#
The square brackets used around Feeds is to indicate the elements that are contained within the "Feeds" vector. So we used them to identify the mean of all the objects within the Feeds object. #
#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
avgFeed#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)")#
?par#
las = edited axis labels#
mar = the margins which should be used#
mgp= the margins that should be used for the title and axis labels#
tck= edited the length of tick marks#
#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck= -0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch =16, xlab= "age in days", ylab= "ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
dev.off()#
Question 2= The graph is very difficult to interpret. I am not exactly sure why it is so difficult to interpret but i would say it, in part, is due to such high intervals on the x-axis which causes a lot of the data to mashed together.
Diapers <- which(*beren3$event == "diaper")
Diapers <- which(beren3$event == "diaper")
avgDiapers <- mean(beren3$value[Diapers])
avgDiapers
setwd('~/Desktop/Evolution/Tasks/Task_02')#
Data <- read.csv('https://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)#
write.csv(Data, 'rawdata.csv', quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]
Diaper <- which(Data[,9] == 'trait_diapers')
berenDiaper <- Data[trait_diapers ,]
berenDiaper <- Data[trait_diaper ,]
berenDiaper <- Data[trait_diaper,]
berenDiaper <- Data[trait_diapers,]
berenDiaper <- Data[trait_Diaper,]
berenDiaper <- Data[trait_Diapers,]
ncol
summary(ncol)
Summary(ncol)
Feeds <- which(Data[,9] == 'bottle')#
berenMilk <- Data[Feeds,]#
head(berenMilk)
Feeds <- which(Data[,'event'] == 'bottle')#
Feeds <- which(Data$event == 'bottle')
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
Feeds <- which(beren3$event == "bottle")#
avgMilk <- mean(beren3$value[Feeds])#
avgMilk
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
avgFeed#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)")#
?par
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck= -0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch =16, xlab= "age in days", ylab= "ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
dev.off()
sourceTime.pdf("https://jonsmitchell.com/code/plotFxn02b.R")
berenDiaper <- Data[trait_Diapers,]
berenDiaper <- Data[trait_Diaper]
Diaper <- which(Data[,9] == 'trait_diapers')
berenDiaper <- Data[trait_Diaper]
berenDiaper <- Data[trait_Diaper,]
berenDiaper <- Data[Diaper ,]
head(berenDiaper)
Diaper <- which(Data[,'event'] == 'diaper')
Diaper <- which(Data$event =='diaper')
Diaper <- which(beren3$event == 'diaper')
avgDiaper <- mean(beren3$value[Diaper])
avgDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], mean)
varDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], var)
totalDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], sum)
numDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], length)
cor(beren3$value[Diaper], beren3$age[Diaper])
cor.test(beren3$value[Diaper], beren3$age[Diaper])
diaperCor <- cor.test
diaperCor <- cor.test(beren3$value[Diaper], beren3$age[Diaper])
summary(diaperCor)
setwd('~/Desktop/Evolution/Tasks/Task_02')#
Data <- read.csv('https://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)#
write.csv(Data, 'rawdata.csv', quote=F)#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
head(Data)#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]
Feeds <- which(Data[,9] == 'bottle')#
berenMilk <- Data[Feeds,]#
head(berenMilk)
Feeds <- which(Data[,'event'] == 'bottle')#
Feeds <- which(Data$event == 'bottle')
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")#
Data$age <- dateID - dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
Feeds <- which(beren3$event == "bottle")#
avgMilk <- mean(beren3$value[Feeds])#
avgMilk
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
avgFeed#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab= "amount of milk consumed (oz)")#
?par
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck= -0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch =16, xlab= "age in days", ylab= "ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
pdf("r02b-totalMilkByDay.pdf", height=4, width=4)#
par(las=1, mar=c(5, 5, 1, 1), mgp=c(2, 0.5, 0), tck=-0.01#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
dev.off()
Diaper <- which(Data[,9] == 'diaper')
berenDiaper <- Data[diaper ,]
head(berenDiaper)
berenDiaper <- Data[diaper,]
berenDiaper <- Data[Diaper,]
head(berenDiaper)
Diaper <- which(Data[,'event'] == 'diaper')
Diaper <- which(Data$event == 'diaper')
avgDiaper <- mean(beren3$value[Diaper])
avgDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], mean)
varDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], var)
totalDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], sum)
numDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], length)
cor(beren3$value[Diaper], beren3$age[Diaper])
cor.test(beren3$value[Diaper], beren3$age[Diaper])
Diaper <- which(Data[,9] == 'Diaper')
berenDiaper <- Data[Diaper, ]
head(berenDiaper)
Diaper <- which(Data[,'event'] == 'Diaper')#
Diaper <- which(Data$event == 'Diaper')#
avgDiaper <- mean(beren3$value[Diaper])#
avgDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], mean)#
varDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], var)#
totalDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], sum)#
numDiaper <- tapply(beren3$value[Diaper], beren3$age[Diaper], length) #
cor(beren3$value[Diaper], beren3$age[Diaper])#
cor.test(beren3$value[Diaper], beren3$age[Diaper])
diaper <- which(Data[,9] == 'diaper')
berendiaper <- Data[diaper, ]
head(berendiaper)
diaper <- which(Data[, 'event'] == 'diaper')
diaper <- which(Data$event =='diaper')
avgdiaper <- mean(beren3$value[diaper])
avgdiaper <- tapply(beren3$value[diaper], beren3$age[diaper], mean)
vardiaper <- tapply(beren3$value[diaper], beren3$age[diaper], var)
totaldiaper <- tapply(beren3$value[diaper], beren3$age[diaper], sum)
numdiaper <- tapply(beren3$value[diaper], beren3$age[diaper], length)
cor(beren3$value[diaper], beren3$age[diaper])
cor.test(beren3$value[diaper], beren3$age[diaper])
diaper <- which(Data[,9] == 'diaper')#
berendiaper <- Data[diaper, ]#
head(berendiaper)
diaper <- which(Data[, 'event'] == 'berendiaper')#
diaper <- which(Data$event =='berendiaper')#
avgdiaper <- mean(beren3$value[berendiaper])#
avgdiaper <- tapply(beren3$value[berendiaper], beren3$age[berendiaper], mean)#
vardiaper <- tapply(beren3$value[berendiaper], beren3$age[berendiaper], var)#
totaldiaper <- tapply(beren3$value[berendiaper], beren3$age[berendiaper], sum)#
numdiaper <- tapply(beren3$value[berendiaper], beren3$age[berendiaper], length)#
cor(beren3$value[berendiaper], beren3$age[berendiaper])#
cor.test(beren3$value[berendiaper], beren3$age[berendiaper])
diaper <- which(Data[,9] == 'diaper')#
berendiaper <- Data[diaper, ]#
head(berendiaper)#
diaper <- which(Data[, 'event'] == 'diaper')#
diaper <- which(Data$event =='diaper')#
avgdiaper <- mean(beren3$value[diaper])#
avgdiaper <- tapply(beren3$value[diaper], beren3$age[diaper], mean)#
vardiaper <- tapply(beren3$value[diaper], beren3$age[diaper], var)#
totaldiaper <- tapply(beren3$value[diaper], beren3$age[diaper], sum)#
numdiaper <- tapply(beren3$value[diaper], beren3$age[diaper], length)#
cor(beren3$value[diaper], beren3$age[berendiaper])#
cor.test(beren3$value[diaper], beren3$age[diaper])
diaper <- which(Data[,9] == 'diaper')#
berendiaper <- Data[diaper, ]#
head(berendiaper)#
diaper <- which(Data[, 'event'] == 'diaper')#
diaper <- which(Data$event =='diaper')#
avgdiaper <- mean(beren3$value[diaper])#
avgdiaper <- tapply(beren3$value[diaper], beren3$age[diaper], mean)#
vardiaper <- tapply(beren3$value[diaper], beren3$age[diaper], var)#
totaldiaper <- tapply(beren3$value[diaper], beren3$age[diaper], sum)#
numdiaper <- tapply(beren3$value[diaper], beren3$age[diaper], length)#
cor(beren3$value[diaper], beren3$age[diaper])#
cor.test(beren3$value[diaper], beren3$age[diaper])
solids <- which(Data[,9] =='solids')
berensolids <- Data[solids, ]
head(berensolids)
solids <- which(Data[, 'event'] == 'solids')
solids <- which(Data$event == 'solids')
avgsolids <- mean(beren3$value[solids])
avgsolids <- tapply(beren3$value[solids], beren3$age[solids], mean)
varsolids <- tapply(beren3$value[solids], beren3$age[solids], var)
totalsolids <- tapply(beren3$value[solids], beren3$age[solids], sum)
numsolids <- tapply(beren3$value[solids], beren3$age[solids], length)
cor(beren3$value[solids], beren3$age[solids])
solids
totalsolids <- sum(solids)
totalage <- sum(age)
totalyear <- sum(year)
plot(totalsolids)
plot(as.numeric(names(totalsolids))totalsolids, type ="b", pch=16)
plot(as.numeric(names(totalsolids))totalsolids, type ="b", pch=16
plot(as.numeric(names(totalsolids)), totalsolids, type ="b", pch=16, xlab ="age in days", ylab = "amount of solids")
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck= -0.01)
plot(as.numeric(names(totalsolids)), totalsolids, type ="b", pch=16, xlab ="age in days", ylab = "amount of solids")
